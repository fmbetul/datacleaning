devtools::document()
devtools::check()
devtools::check()
setwd("/Users/macbook/Documents/DoegeLab/projects/multiome2/arc/cm001/")
library(Signac)
library(Seurat)
library(EnsDb.Hsapiens.v86)
library(BSgenome.Hsapiens.UCSC.hg38)
library(biovizBase)
library(tidyverse)
library(ggpubr)
library(here)
set.seed(1234)
load("cm001.rds")
#Rename clusters
cm001 <- RenameIdents(cm001,
'POMC/NR5A2' = 'POMC.NR5A2',
'SST/OTP' = 'SST.OTP')
cm001$celltype <- Idents(cm001)
# load functions
source("/Users/macbook/Documents/DoegeLab/projects/functions/DataCleanPackage/DataCleanPkg_v1.2.R")
DimPlot(cm001, reduction = "umap", label = T)
table(Idents(cm001))
# SST.OTP
CropCluster(cm001, ClusterNo = 2, min.x = -1, max.x = 4, max.y = -2)
# load functions
source("/Users/macbook/Documents/DoegeLab/projects/functions/DataCleanPackage/DataCleanPkg_v1.2.R")
# SST.OTP
CropCluster(cm001, ClusterNo = 2, min.x = -1, max.x = 4, max.y = -2)
?DimPlot
# load functions
source("/Users/macbook/Documents/DoegeLab/projects/functions/DataCleanPackage/DataCleanPkg_v1.2.R")
# SST.OTP
CropCluster(cm001, ClusterNo = 2, min.x = -1, max.x = 4, max.y = -2)
# load functions
source("/Users/macbook/Documents/DoegeLab/projects/functions/DataCleanPackage/DataCleanPkg_v1.2.R")
# SST.OTP
CropCluster(cm001, ClusterNo = 2, min.x = -1, max.x = 4, max.y = -2)
# POMC
CropCluster(cm001, ClusterNo = 3, min.x = -5, max.x = 4.5, max.y = 1.4)
# POMC.NR5A2
CropCluster(cm001, ClusterNo = 1, min.x = 1.5, max.x = 12, min.y = -4, max.y = 1.4)
# Neuronal
CropCluster(cm001, ClusterNo = 4, min.x = -3.1, max.x = 5, min.y = 1.4)
# Progenitors
CropCluster(cm001, ClusterNo = 5, max.x = -3.1, min.y = 1.4)
# VLMC
CropCluster(cm001, ClusterNo = 6, max.x = -5, max.y = 1.4)
getLeftovers(cm001)
SeuData <- cm001
# get cluster names:
Clusters <- levels(Idents(SeuData))
# get the UMAP coordinates of each cell
UMAP_Data <- as.data.frame(SeuData@reductions$umap@cell.embeddings)
ClusterName <- "POMC"
cluster.barcodes <- WhichCells(SeuData, idents = ClusterName)
# Check-point
print(paste("Current cluster:", ClusterName, sep = " "))
print(paste("Total number of cells in this cluster:", length(cluster.barcodes), sep = " "))
table(Idents(cm001))
# get UMAP coordinates of the cells in the selected cluster
Cluster_Coords <- subset(UMAP_Data, row.names(UMAP_Data) %in% cluster.barcodes)
DimPlot(Cluster_Coords, reduction="umap", cols = c("#cb181d"), na.value = "grey85")
DimPlot(SeuData, cells = cluster.barcodes, reduction="umap", cols = c("#cb181d"), na.value = "grey85")
check.cluster <- DimPlot(SeuData, cells = cluster.barcodes, reduction="umap", cols = c("#cb181d"), na.value = "grey85")
print(check.cluster)
?DimPlot
DimPlot(SeuData, cells.highlight = cluster.barcodes, reduction="umap", cols = c("#cb181d"), na.value = "grey85")
?DimPlot
DimPlot(SeuData, cells.highlight = cluster.barcodes, reduction="umap", cols = c("#cb181d", "grey90"), na.value = "grey85", label = TRUE)
dim(cluster.barcodes)
length(cluster.barcodes)
?DimPlot
DimPlot(SeuData, cells.highlight = cluster.barcodes, reduction="umap", cols.highlight = c("#cb181d"), na.value = "grey85", label = TRUE)
?DimPlot
DimPlot(object = SeuData, cells.highlight = cluster.barcodes,
cols.highlight = c("#cb181d"), na.value = "grey85",
pt.size = 0.5, sizes.highlight = 0.5,
reduction="umap", label = TRUE)
?DimPlot
DimPlot(object = SeuData, cells.highlight = cluster.barcodes,
cols.highlight = c("#cb181d"), na.value = "grey85",
pt.size = 0.5, sizes.highlight = 0.5,
reduction="umap", label = FALSE)
library(ggplot2)
p <- DimPlot(object = SeuData, cells.highlight = cluster.barcodes,
cols.highlight = c("#cb181d"), na.value = "grey85",
pt.size = 0.5, sizes.highlight = 0.5,
reduction="umap", label = FALSE)
# Modify the plot to add custom labels
p_modified <- p +
geom_text(data = data.frame(x = c(x1, x2), y = c(y1, y2),
label = c("SeuObject", "current_cluster")),
aes(x = x, y = y, label = label), inherit.aes = FALSE, color = "black")
p <- DimPlot(object = SeuData, cells.highlight = cluster.barcodes,
cols.highlight = c("#cb181d"), na.value = "grey85",
pt.size = 0.5, sizes.highlight = 0.5,
reduction="umap", label = FALSE)
# Modify the plot to add custom labels
p_modified <- p +
geom_text(data = data.frame(label = c("SeuObject", "current_cluster")),
aes(x = x, y = y, label = label), inherit.aes = FALSE, color = "black")
# Display the modified plot
print(p_modified)
p <- DimPlot(object = SeuData, cells.highlight = cluster.barcodes,
cols.highlight = c("#cb181d"), na.value = "grey85",
pt.size = 0.5, sizes.highlight = 0.5,
reduction="umap", label = FALSE)
# Modify the plot to add custom labels
p_modified <- p +
geom_text(data = data.frame(x = c(10, 13), y = c(1, 4),
label = c("SeuObject", "current_cluster")),
aes(x = x, y = y, label = label), inherit.aes = FALSE, color = "black")
# Display the modified plot
print(p_modified)
p <- DimPlot(object = SeuData, cells.highlight = cluster.barcodes,
cols.highlight = c("#cb181d"), na.value = "grey85",
pt.size = 0.5, sizes.highlight = 0.5,
reduction="umap", label = FALSE)
# Modify the plot to add custom labels
p_modified <- p +
geom_text(data = data.frame(x = c(10, 13),
label = ClusterName ,
aes(x = x, label = label), inherit.aes = FALSE, color = "#cb181d")
# Display the modified plot
print(p_modified)
p <- DimPlot(object = SeuData, cells.highlight = cluster.barcodes,
cols.highlight = c("#cb181d"), na.value = "grey85",
pt.size = 0.5, sizes.highlight = 0.5,
reduction="umap", label = FALSE)
p_modified <- p +
geom_text(data = data.frame(x = c(10, 13),
label = ClusterName ,
aes(x = x, label = label), inherit.aes = FALSE, color = "red")
# Display the modified plot
print(p_modified)
ClusterName
p <- DimPlot(object = SeuData, cells.highlight = cluster.barcodes,
cols.highlight = c("#cb181d"), na.value = "grey85",
pt.size = 0.5, sizes.highlight = 0.5,
reduction="umap", label = FALSE)
p_modified <- p +
geom_text(data = data.frame(x = c(10, 13),
label = ClusterName),
aes(x = x, label = label), inherit.aes = FALSE, color = "red")
print(p_modified)
p <- DimPlot(object = SeuData, cells.highlight = cluster.barcodes,
cols.highlight = c("#cb181d"), na.value = "grey85",
pt.size = 0.5, sizes.highlight = 0.5,
reduction="umap", label = FALSE)
# Define x and y coordinates for the label position
label_x <- 10
label_y <- 13
p_modified <- p +
geom_text(data = data.frame(x = label_x, y = label_y,
label = ClusterName),
aes(x = x, y = y, label = label), inherit.aes = FALSE, color = "red")
print(p_modified)
# load functions
source("/Users/macbook/Documents/DoegeLab/projects/functions/DataCleanPackage/DataCleanPkg_v1.2.R")
getLeftovers(cm001)
assignExtraCluster(cm001, "SST.OTP", min.x = -1, max.x = 4, max.y = -2)
# CheckUMAP1() function
CheckUMAP1 = function(CheckInput, sample = SeuData){
if(class(CheckInput) == "data.frame"){
CheckMeta = as.data.frame(c(rep("current_cluster", length(row.names(CheckInput)))))
colnames(CheckMeta) = "Pop"
row.names(CheckMeta) = row.names(CheckInput)
}else{
CheckMeta = as.data.frame(c(rep("current_cluster", length(colnames(CheckInput)))))
colnames(CheckMeta) = "Pop"
row.names(CheckMeta) = colnames(CheckInput)
}
sample = AddMetaData(sample, CheckMeta, "CheckMeta")
Idents(sample) = "CheckMeta"
DimPlot(sample, reduction="umap", cols = c("#cb181d"), na.value = "grey85")
}
# CheckUMAP2() function
CheckUMAP2 = function(CheckInput, sample = SeuData){
if(class(CheckInput) == "data.frame"){
CheckMeta = as.data.frame(c(rep("cropped_cluster", length(row.names(CheckInput)))))
colnames(CheckMeta) = "Pop"
row.names(CheckMeta) = row.names(CheckInput)
}else{
CheckMeta = as.data.frame(c(rep("cropped_cluster", length(colnames(CheckInput)))))
colnames(CheckMeta) = "Pop"
row.names(CheckMeta) = colnames(CheckInput)
}
sample = AddMetaData(sample, CheckMeta, "CheckMeta")
Idents(sample) = "CheckMeta"
DimPlot(sample, reduction="umap", cols = c("#cb181d"), na.value = "grey85")
}
# CheckUMAP3() function
CheckUMAP3 = function(CheckInput, sample = SeuData){
if(class(CheckInput) == "data.frame"){
CheckMeta = as.data.frame(c(rep("leftovers", length(row.names(CheckInput)))))
colnames(CheckMeta) = "Pop"
row.names(CheckMeta) = row.names(CheckInput)
}else{
CheckMeta = as.data.frame(c(rep("leftovers", length(colnames(CheckInput)))))
colnames(CheckMeta) = "Pop"
row.names(CheckMeta) = colnames(CheckInput)
}
sample = AddMetaData(sample, CheckMeta, "CheckMeta")
Idents(sample) = "CheckMeta"
DimPlot(sample, reduction="umap", cols = c("#cb181d"), na.value = "grey85")
}
# CheckUMAP4() function
CheckUMAP3 = function(CheckInput, sample = SeuData){
if(class(CheckInput) == "data.frame"){
CheckMeta = as.data.frame(c(rep("new_leftovers", length(row.names(CheckInput)))))
colnames(CheckMeta) = "Pop"
row.names(CheckMeta) = row.names(CheckInput)
}else{
CheckMeta = as.data.frame(c(rep("new_leftovers", length(colnames(CheckInput)))))
colnames(CheckMeta) = "Pop"
row.names(CheckMeta) = colnames(CheckInput)
}
sample = AddMetaData(sample, CheckMeta, "CheckMeta")
Idents(sample) = "CheckMeta"
DimPlot(sample, reduction="umap", cols = c("#cb181d"), na.value = "grey85")
}
assignExtraCluster(cm001, "SST.OTP", min.x = -1, max.x = 4, max.y = -2)
# load functions
source("/Users/macbook/Documents/DoegeLab/projects/functions/DataCleanPackage/DataCleanPkg_v1.2.R")
getLeftovers(cm001)
assignExtraCluster(cm001, "SST.OTP", min.x = -1, max.x = 4, max.y = -2)
validateExtraCluster(cm001)
assignExtraCluster(cm001, "POMC.NR5A2", min.x = 1.5, max.y = 1.4)
validateExtraCluster(cm001)
assignExtraCluster(cm001, ClusterName = "POMC", min.x = -5, max.x = 1.5, max.y = 1.4)
validateExtraCluster(cm001)
assignExtraCluster(cm001, ClusterName = "Neuronal", min.x = -3.1, min.y = 1.4)
validateExtraCluster(cm001)
assignExtraCluster(cm001, "Progenitors", min.y = 1.4)
validateExtraCluster(cm001)
assignExtraCluster(cm001, "VLMC")
devtools::document()
devtools::check()
CheckUMAP1 = function(CheckInput, sample = SeuData){
if(inherits(CheckInput, "data.frame")){
CheckMeta = as.data.frame(c(rep("current_cluster", length(row.names(CheckInput)))))
colnames(CheckMeta) = "Pop"
row.names(CheckMeta) = row.names(CheckInput)
}else{
CheckMeta = as.data.frame(c(rep("current_cluster", length(colnames(CheckInput)))))
colnames(CheckMeta) = "Pop"
row.names(CheckMeta) = colnames(CheckInput)
}
sample = AddMetaData(sample, CheckMeta, "CheckMeta")
Idents(sample) = "CheckMeta"
DimPlot(sample, reduction="umap", cols = c("#cb181d"), na.value = "grey85")
}
CheckUMAP1(Cluster_Coords, sample = SeuData)
rm(list = ls())
setwd("/Users/macbook/Documents/DoegeLab/projects/multiome2/arc/cm001/")
library(Signac)
library(Seurat)
library(EnsDb.Hsapiens.v86)
library(BSgenome.Hsapiens.UCSC.hg38)
library(biovizBase)
library(tidyverse)
library(ggpubr)
library(here)
set.seed(1234)
load("cm001.rds")
#Rename clusters
cm001 <- RenameIdents(cm001,
'POMC/NR5A2' = 'POMC.NR5A2',
'SST/OTP' = 'SST.OTP')
cm001$celltype <- Idents(cm001)
# load functions
source("/Users/macbook/Documents/DoegeLab/projects/functions/DataCleanPackage/DataCleanPkg_v1.3.R")
DimPlot(cm001, reduction = "umap", label = T)
table(Idents(cm001))
# SST.OTP
SST.OTP_Clean <- CropCluster(cm001, ClusterNo = 2, min.x = -1, max.x = 4, max.y = -2)
# SST.OTP
SST.OTP_Clean <- CropCluster(cm001, ClusterNo = 2, min.x = -1, max.x = 4, max.y = -2)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
devtools::document()
warnings()
devtools::document()
rm(list = c("assignExtraCluster", "CheckUMAP1", "CheckUMAP2", "CheckUMAP3", "CheckUMAP4", "CropCluster", "getFinalClusters", "getLeftovers",
"validateExtraCluster"))
rm(CheckUMAP)
rm(SST.OTP_Clean)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?Idents
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
source("~/Documents/R_projects/datacleaning/R/validateExtraCluster.R")
rm(validateExtraCluster())
rm(validateExtraCluster
)
devtools::document()
devtools::check()
?levels
?Idents
?Seurat::Idents
?SeuratOnject::Idents
?SeuratObject::Idents
devtools::document()
devtools::check()
?AddMetaData
SeuData <- cm001
devtools::document()
devtools::check()
?DimPlot
?Seurat::Dimplot
?Seurat::DimPlot
?as.data.frame
?Seurat::DimPlot
?Seurat::WhichCells
?SeuratObject::WhichCells
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
install.packages("SeuratObject")
library(SeuratObject)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
source("/Users/macbook/Documents/R_projects/datacleaning/R/")
source("/Users/macbook/Documents/R_projects/datacleaning/R/")```
# load functions:
source("/Users/macbook/Documents/R_projects/datacleaning/R/assignExtraCluster.R")
source("/Users/macbook/Documents/R_projects/datacleaning/R/CheckUMAP1.R")
source("/Users/macbook/Documents/R_projects/datacleaning/R/CheckUMAP2.R")
source("/Users/macbook/Documents/R_projects/datacleaning/R/CheckUMAP3.R")
source("/Users/macbook/Documents/R_projects/datacleaning/R/CheckUMAP4.R")
source("/Users/macbook/Documents/R_projects/datacleaning/R/CropCluster.R")
source("/Users/macbook/Documents/R_projects/datacleaning/R/getFinalClusters.R")
source("/Users/macbook/Documents/R_projects/datacleaning/R/getLeftovers.R")
source("/Users/macbook/Documents/R_projects/datacleaning/R/validateExtraCluster.R")
DimPlot(cm001, reduction = "umap", label = T)
table(Idents(cm001))
# SST.OTP
CropCluster(cm001, ClusterNo = 2, min.x = -1, max.x = 4, max.y = -2)
# POMC
CropCluster(cm001, ClusterNo = 3, min.x = -5, max.x = 4.5, max.y = 1.4)
# POMC.NR5A2
CropCluster(cm001, ClusterNo = 1, min.x = 1.5, max.x = 12, min.y = -4, max.y = 1.4)
# Neuronal
CropCluster(cm001, ClusterNo = 4, min.x = -3.1, max.x = 5, min.y = 1.4)
# Progenitors
CropCluster(cm001, ClusterNo = 5, max.x = -3.1, min.y = 1.4)
# VLMC
CropCluster(cm001, ClusterNo = 6, max.x = -5, max.y = 1.4)
getLeftovers(cm001)
assignExtraCluster(cm001, "SST.OTP", min.x = -1, max.x = 4, max.y = -2)
validateExtraCluster(cm001)
assignExtraCluster(cm001, "POMC.NR5A2", min.x = 1.5, max.y = 1.4)
validateExtraCluster(cm001)
assignExtraCluster(cm001, ClusterName = "POMC", min.x = -5, max.x = 1.5, max.y = 1.4)
validateExtraCluster(cm001)
assignExtraCluster(cm001, ClusterName = "Neuronal", min.x = -3.1, min.y = 1.4)
validateExtraCluster(cm001)
assignExtraCluster(cm001, "Progenitors", min.y = 1.4)
validateExtraCluster(cm001)
assignExtraCluster(cm001, "VLMC")
cm001 <- getFinalClusters(cm001)
rm(list = ls())
