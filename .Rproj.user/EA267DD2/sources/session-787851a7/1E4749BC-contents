# DataCleanPkg_v1.0
# 2023/04/29


library(Seurat)
library(Signac)

# deneme icin:

#load("Users/macbook/Documents/DoegeLab/projects/multiome2/arc/cm001/cm001.rds")

#SeuData <- cm001

#########


# define CheckUMAP() function
CheckUMAP = function(CheckInput, sample = SeuData){
  if(class(CheckInput) == "data.frame"){
    CheckMeta = as.data.frame(c(rep("RoI", length(row.names(CheckInput)))))
    colnames(CheckMeta) = "Pop"
    row.names(CheckMeta) = row.names(CheckInput)
  }else{
    CheckMeta = as.data.frame(c(rep("RoI", length(colnames(CheckInput)))))
    colnames(CheckMeta) = "Pop"
    row.names(CheckMeta) = colnames(CheckInput)
  }

  sample = AddMetaData(sample, CheckMeta, "CheckMeta")     # CheckMeta is sth like: NA NA NA
  Idents(sample) = "CheckMeta"
  DimPlot(sample, reduction="umap", cols = c("#cb181d"), na.value = "grey85",)
}





CropCluster = function(SeuData, ClusterNo = 2,
                        min.x = -5, max.x = 4.5,
                        min.y = -15, max.y = 1.4){


  Filename = as.character(substitute(SeuData))

  # get cluster names:
  Clusters <- levels(Idents(SeuData))

  # get the UMAP coordinates of each cell
  UMAP_Data <- as.data.frame(SeuData@reductions$umap@cell.embeddings)




  # 1. Select a new cluster & check its properties
  set.cluster <- Clusters[ClusterNo]
  if (!is.character(set.cluster)) {
    stop("Error: This ClusterNo is not available.")
  }
  cluster.barcodes <- WhichCells(SeuData, idents = set.cluster)

  # Check-point
  print(paste("Current cluster:", set.cluster, sep = " "))
  print(paste("Total number of cells in this cluster:", length(cluster.barcodes), sep = " "))

  # get UMAP coordinates of the cells in the selected cluster
  Cluster_Coords <- subset(UMAP_Data, row.names(UMAP_Data) %in% cluster.barcodes)

  # look at the selected cluster on UMAP
  check.cluster <- CheckUMAP(Cluster_Coords, sample = SeuData)
  print(check.cluster)

  ###

  # set the cluster boundaries
  Cluster_Clean = subset(UMAP_Data,
                         row.names(UMAP_Data) %in% cluster.barcodes
                         & UMAP_Data $UMAP_1 > min.x
                         & UMAP_Data $UMAP_1 < max.x
                         & UMAP_Data $UMAP_2 > min.y
                         & UMAP_Data $UMAP_2 < max.y)



  print(paste(length(cluster.barcodes), "cells were present in original cluster.", sep = " "))
  print(paste(dim(Cluster_Clean)[1], "cells left in", set.cluster ,"cluster.", sep = " "))
  print(paste("Current number of cells in Leftovers must be", length(cluster.barcodes) - dim(Cluster_Clean)[1], sep = " "))

  # look at the new cluster on UMAP
  check.cropped.cluster <- CheckUMAP(Cluster_Clean, sample = SeuData)
  print(check.cropped.cluster)

  # save cleaned cluster
  set.name <- paste0(set.cluster, "_Clean")     # eg."POMC_Clean"
  assign(set.name, Cluster_Clean, envir = globalenv())


  ###

  # 3. Current_Leftovers (double-check)

  Current_Leftovers <- subset(Cluster_Coords, !(row.names(Cluster_Coords) %in% row.names(Cluster_Clean)))
  print(paste("Current number of cells in Leftovers is", length(Current_Leftovers), sep = " "))

  # look at the Leftovers on UMAP
  check.leftovers <- CheckUMAP(Current_Leftovers, sample = SeuData)
  print(check.leftovers)

  }














